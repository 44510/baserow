#before_script:
#  - apt-get update && apt-get -y install make curl gnupg2

stages:
  - build
  - lint
  - test
  - publish
#
#web-frontend-eslint:
#  stage: lint
#  image: node:12
#  script:
#    - cd web-frontend
#    - make install-dependencies
#    - make eslint
#
#web-frontend-stylelint:
#  stage: lint
#  image: node:12
#  script:
#    - cd web-frontend
#    - make install-dependencies
#    - make stylelint
#
#web-frontend-test:
#  stage: test
#  image: node:12
#  script:
#    - cd web-frontend
#    - make install-dependencies
#    - make test
#
#backend-flake8:
#  stage: lint
#  image: python:3.7
#  script:
#    - cd backend
#    - make install-dependencies
#    - make install-dev-dependencies
#    - make lint
#
#backend-pytest:
#  stage: test
#  image: python:3.7
#  services:
#    - name: postgres:11.3
#      alias: db
#    - name: liminspace/mjml-tcpserver:0.10
#      alias: mjml
#  variables:
#    POSTGRES_USER: baserow
#    POSTGRES_PASSWORD: baserow
#    POSTGRES_DB: baserow
#  script:
#    - cd backend
#    - make install-dependencies
#    - make install-dev-dependencies
#    - export PYTHONPATH=$CI_PROJECT_DIR/backend/src:$CI_PROJECT_DIR/premium/backend/src
#    - make test
#
#backend-setup:
#  stage: build
#  image: python:3.7
#  script:
#    - pip install -e ./backend
#    - python -c 'import baserow'
#    - pip install -e ./premium/backend
#    - python -c 'import baserow_premium'
#    - export DJANGO_SETTINGS_MODULE='baserow.config.settings.base'
#    - timeout --preserve-status 10s gunicorn --workers=1 -b 0.0.0.0:8000 -k uvicorn.workers.UvicornWorker baserow.config.asgi:application
variables:
  CI_IMAGE_REPO: $CI_REGISTRY_IMAGE/ci
  IMAGE_REPO: $CI_REGISTRY_IMAGE/testing

build-baserow-images:
  image: docker:19.03.12
  stage: build
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_BUILDKIT: 1
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  script:
    - |
      build_and_push_ci_image(){
        IMAGE_PATH=$1
        IMAGE_NAME=$2

        # Try cache from this branches latest image, if not fall back to the latest
        # develop image.
        # Ensure we don't go over 128 char docker tag length limit
        TRUNCATED_BRANCH_NAME=${CI_COMMIT_REF_NAME:0:100}
        BRANCH_TAG=$TRUNCATED_BRANCH_NAME-$CI_COMMIT_SHORT_SHA
        DEV_LATEST_BRANCH_TAG=dev-$TRUNCATED_BRANCH_NAME-latest

        CACHE_IMAGE="$IMAGE_REPO/$IMAGE_NAME:$DEV_LATEST_BRANCH_TAG"
        if ! docker pull $CACHE_IMAGE; then
          CACHE_IMAGE="$IMAGE_REPO/$IMAGE_NAME:dev-latest";
          if ! docker pull $CACHE_IMAGE; then
             CACHE_IMAGE=""
          fi
        fi

        if [[ -n "$CACHE_IMAGE" ]]; then
          echo "Caching docker build from $CACHE_IMAGE";
          CACHE_ARG="--cache-from $CACHE_IMAGE";
        else
          echo "Couldn't find image to cache build using"
          CACHE_ARG=""
        fi

        CI_IMAGE_PATH=$CI_IMAGE_REPO/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA
        docker build --build-arg BUILDKIT_INLINE_CACHE=1 $CACHE_ARG --target dev --tag $CI_IMAGE_PATH -f $IMAGE_PATH .;
        docker push $CI_IMAGE_PATH
      }

      build_and_push_ci_image "$CI_PROJECT_DIR/backend/Dockerfile" "backend"
      # build_and_push_ci_image "$CI_PROJECT_DIR/web-frontend/Dockerfile" "web-frontend"

backend-lint:
  stage: lint
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  script:
    - docker run $CI_IMAGE_REPO/backend:$CI_COMMIT_SHORT_SHA lint

backend-test:
  stage: test
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
    - name: postgres:11.3
      alias: db
    - name: liminspace/mjml-tcpserver:0.10
      alias: mjml
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DATABASE_USER: baserow
    DATABASE_PASSWORD: baserow
    DATABASE_NAME: baserow
  script:
    - docker run --network host $CI_IMAGE_REPO/backend:$CI_COMMIT_SHORT_SHA test

publish-baserow-images:
  image: docker:19.03.12
  stage: publish
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_BUILDKIT: 1
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    IMAGE_LABELS: >
      --label org.opencontainers.image.vendor=$CI_PROJECT_URL
      --label org.opencontainers.image.authors=$CI_PROJECT_URL
      --label org.opencontainers.image.revision=$CI_COMMIT_SHA
      --label org.opencontainers.image.source=$CI_PROJECT_URL
      --label org.opencontainers.image.documentation=$CI_PROJECT_URL
      --label org.opencontainers.image.licenses=$CI_PROJECT_URL
      --label org.opencontainers.image.url=$CI_PROJECT_URL
      --label vcs-url=$CI_PROJECT_URL
      --label com.gitlab.ci.user=$CI_SERVER_URL/$GITLAB_USER_LOGIN
      --label com.gitlab.ci.email=$GITLAB_USER_EMAIL
      --label com.gitlab.ci.tagorbranch=$CI_COMMIT_REF_NAME
      --label com.gitlab.ci.pipelineurl=$CI_PIPELINE_URL
      --label com.gitlab.ci.commiturl=$CI_PROJECT_URL/commit/$CI_COMMIT_SHA
      --label com.gitlab.ci.cijoburl=$CI_JOB_URL
      --label com.gitlab.ci.mrurl=$CI_PROJECT_URL/-/merge_requests/$CI_MERGE_REQUEST_ID
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  script:
    - |
      echo "Building and shipping image to $IMAGE_REPO"
      #Build date for opencontainers
      BUILDDATE="'$(date '+%FT%T%z' | sed -E -n 's/(\+[0-9]{2})([0-9]{2})$/\1:\2/p')'" #rfc 3339 date
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.created=$BUILDDATE --label build-date=$BUILDDATE"
      #Add ref.name for opencontainers
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.ref.name=$IMAGE_REPO:$CI_COMMIT_REF_NAME"

      # Ensure we don't go over 128 char docker tag length limit
      TRUNCATED_BRANCH_NAME=${CI_COMMIT_REF_NAME:0:100}
      BRANCH_TAG=$TRUNCATED_BRANCH_NAME-$CI_COMMIT_SHORT_SHA
      LATEST_BRANCH_TAG=$TRUNCATED_BRANCH_NAME-latest

      ADDITIONALTAGLIST="$ADDITIONALTAGLIST $BRANCH_TAG $LATEST_BRANCH_TAG"

      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        ADDITIONALTAGLIST="$ADDITIONALTAGLIST latest";
        VERSIONLABEL=$CI_COMMIT_TAG
        if [[ ! -z "$VERSIONLABEL" ]]; then
          IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.version=$VERSIONLABEL"
          ADDITIONALTAGLIST="$ADDITIONALTAGLIST $VERSIONLABEL"
        fi
      fi
      # todo put "develop" in some sort of project variable.
      if [[ "$CI_COMMIT_BRANCH" == "develop" ]]; then ADDITIONALTAGLIST="$ADDITIONALTAGLIST dev-latest"; fi

      build_and_push_image(){
        IMAGE_PATH=$1
        IMAGE_NAME=$2

        #Description for opencontainers
        BUILDTITLE="$(echo $CI_PROJECT_TITLE | tr " " "_")_$IMAGE_NAME"
        IMAGE_LABELS_WITH_TITLE="$IMAGE_LABELS --label org.opencontainers.image.title=$BUILDTITLE --label org.opencontainers.image.description=$BUILDTITLE"

        FORMATTEDTAGLIST=""
        if [[ -n "$ADDITIONALTAGLIST" ]]; then
          for TAG in $ADDITIONALTAGLIST; do
            TAGGED_IMAGE=$IMAGE_REPO/$IMAGE_NAME:$TAG
            FORMATTEDTAGLIST="${FORMATTEDTAGLIST} -t $TAGGED_IMAGE ";
          done;
        fi

        # Build the normal non-dev target image with all the tags and labels.
        docker build --cache-from $CI_IMAGE_REPO/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA $FORMATTEDTAGLIST $IMAGE_LABELS_WITH_TITLE -f $IMAGE_PATH .;

        # Push all the tags we just built above
        if [[ -n "$ADDITIONALTAGLIST" ]]; then
          for TAG in $ADDITIONALTAGLIST; do
            TAGGED_IMAGE=$IMAGE_REPO/$IMAGE_NAME:$TAG
            docker push $TAGGED_IMAGE
          done;
        fi

        # Push the CI image as the latest dev image.
        DEV_LATEST_TAG=$IMAGE_REPO/$IMAGE_NAME:dev-$LATEST_BRANCH_TAG
        docker tag $CI_IMAGE_REPO/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA $DEV_LATEST_TAG
        docker push $DEV_LATEST_TAG
      }

      build_and_push_image "$CI_PROJECT_DIR/backend/Dockerfile" "backend"
      # build_and_push_image "$CI_PROJECT_DIR/web-frontend/Dockerfile" "web-frontend"
